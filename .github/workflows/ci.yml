# cookflow-frontend/.github/workflows/ci.yml
name: Frontend CI & E2E Tests

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  repository_dispatch: # <--- THIS IS KEY: listens for triggers from backend
    types: [backend_update] # The specific event type from the backend CI

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # From Org Secret
          password: ${{ secrets.DOCKER_PASSWORD }} # From Org Secret

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Builds from the root of this frontend repo
          push: true
          tags: |
            your_docker_registry_username/cookflow-frontend:latest
            your_docker_registry_username/cookflow-frontend:${{ github.sha }}
          # For GHCR: tags: ghcr.io/${{ github.repository_owner }}/cookflow-frontend:latest

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend # Ensures frontend image is built/pushed first
    # Only run E2E if it's a push to main/dev or explicitly triggered by 'backend_update'
    if: |
      github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') ||
      github.event_name == 'repository_dispatch' && github.event.action == 'backend_update'
    steps:
      - name: Checkout Frontend Code (incl. docker-compose.yml and cypress)
        uses: actions/checkout@v4

      - name: Login to Docker Registry (needed to pull backend image)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Cypress & Start All Services
        # This will PULL the backend image, and BUILD frontend/cypress locally
        run: docker compose up -d --build

      - name: Wait for services to be healthy
        run: |
          docker compose wait db
          docker compose wait backend
          docker compose wait frontend

      - name: Run Backend Migrations & Seed Data
        # This runs on the backend service *pulled from the registry*
        run: docker compose run --rm backend sh -c "python manage.py migrate --noinput && python manage.py seed_all"

      - name: Run Cypress E2E Tests (Headless)
        run: docker compose run --rm --entrypoint "" cypress sh -c "cd /e2e && npx cypress run --project ./"
        env:
          CYPRESS_BASE_URL: http://frontend:80
          CYPRESS_API_URL: http://backend:8000/api
          # Add any other organization secrets your tests need (e.g., TEST_USER_PASSWORD)

      - name: Clean up Docker Compose
        if: always() # This step will always run, even if tests fail
        run: docker compose down
