name: Frontend CI & E2E Tests

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  repository_dispatch:
    types: [backend_update]

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            hemaps/cookflow-frontend:latest
            hemaps/cookflow-frontend:${{ github.sha }}

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend
    if: |
      github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') ||
      github.event_name == 'repository_dispatch' && github.event.action == 'backend_update'
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Project Name
        run: echo "COMPOSE_PROJECT_NAME=cookflow" >> $GITHUB_ENV

      - name: Verify Compose Config
        run: docker compose config

      - name: Start Database Only
        run: docker compose up -d db

      - name: Custom Wait for DB to be healthy
        run: |
          MAX_RETRIES=60
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if docker compose exec -T db sh -c "pg_isready -h localhost -p 5432 -U postgres"; then
              exit 0
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 5
          done
          exit 1

      - name: Verify Backend Python Environment
        run: |
          echo "Checking Python installation in backend image..."
          docker run --rm hemaps/cookflow-backend:latest sh -c \
            "which python && python --version && pip list && ls -la /app"

      - name: Run Backend Migrations
        run: |
          docker compose run --rm backend sh -c \
            "python -c 'import sys; print(sys.path)' && \
             python manage.py migrate --noinput"

      - name: Start All Services
        run: docker compose up -d --build

      - name: Wait for Backend to be healthy
        timeout-minutes: 5
        run: |
          docker compose wait backend || \
          (docker compose logs backend && exit 1)

      - name: Debug Backend Status
        if: always()
        run: |
          docker compose ps -a
          docker compose logs backend
          BACKEND_ID=$(docker compose ps -q backend)
          docker inspect $BACKEND_ID | jq '.[].State'

      - name: Seed Database
        run: docker compose run --rm backend sh -c "python manage.py seed_all"

      - name: Wait for Frontend to be healthy
        run: docker compose wait frontend

      - name: Run Cypress E2E Tests
        run: docker compose run --rm --entrypoint "" cypress sh -c "cd /e2e && npx cypress run --project ./"
        env:
          CYPRESS_BASE_URL: http://frontend:80
          CYPRESS_API_URL: http://backend:8000/api

      - name: Clean up Docker Compose
        if: always()
        run: docker compose down