name: Frontend CI & E2E Tests

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  repository_dispatch:
    types: [backend_update]

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            hemaps/cf-frontend:latest
            hemaps/cf-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-push-frontend
    if: |
      github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') ||
      github.event_name == 'repository_dispatch' && github.event.action == 'backend_update'
    steps: # This 'steps:' line should be indented with 4 spaces relative to 'e2e-tests:'
      - name: Checkout Frontend Code # This '- name:' line should be indented with 6 spaces
        uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Project Name
        run: echo "COMPOSE_PROJECT_NAME=cf" >> $GITHUB_ENV

      - name: Verify Compose Config
        run: docker compose config

      - name: Start Database Only
        run: docker compose up -d db

      - name: Custom Wait for DB to be healthy
        run: | # The content of this 'run' block must be indented by 2 spaces relative to 'run: |'
          echo "Starting custom wait for DB..."
          MAX_RETRIES=60
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES: Checking DB readiness..."
            if docker compose exec -T db sh -c "pg_isready -h localhost -p 5432 -U admin -d cookflow_db"; then
              echo "DB is ready! Proceeding."
              exit 0
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 5
          done
          echo "Error: DB did not become healthy within the timeout period."
          exit 1

      - name: Debug Check curl in backend container # This '- name:' line should be indented with 6 spaces
        continue-on-error: true
        run: | # The content of this 'run' block must be indented by 2 spaces relative to 'run: |'
          echo "Checking for curl in backend container..."
          docker compose exec -T backend sh -c "which curl && curl --version" || echo "curl not found in backend container or failed to execute."

      - name: Verify Backend Python Environment
        run: docker compose run --rm backend sh -c "which python && python --version && pip list"

      - name: Run Backend Migrations
        run: docker compose run --rm backend python manage.py migrate --noinput

      - name: Start All Services
        run: docker compose up -d --build backend frontend

      - name: Wait for Backend to be healthy
        timeout-minutes: 5
        run: | # The content of this 'run' block must be indented by 2 spaces relative to 'run: |'
          echo "Waiting for backend to be healthy..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          until docker compose exec -T backend curl http://localhost:8000/admin/; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "Error: Backend did not become healthy within the timeout period."
              docker compose logs backend
              exit 1
            fi
            sleep 10
            echo "Backend not ready yet... Retrying in 10s."
            docker compose logs backend
          done
          echo "Backend is healthy!"

      - name: Wait for Frontend to be healthy
        run: |
          echo "Waiting for frontend to be healthy..."
          until curl -sf http://frontend:80 >/dev/null; do
            sleep 5
            echo "Frontend not ready yet..."
          done || (docker compose logs frontend && exit 1)

      - name: Seed Database
        run: docker compose run --rm backend python manage.py seed_all

      - name: Run Cypress E2E Tests (Headless)
        timeout-minutes: 10
        run: docker compose run --rm --entrypoint "" cypress sh -c "cd /e2e && npx cypress run --project ./"
        env:
          CYPRESS_BASE_URL: http://frontend:80
          CYPRESS_API_URL: http://backend:8000/api

      - name: Upload Cypress Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload Cypress Videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Clean up Docker Compose
        if: always()
        run: docker compose down -v --remove-orphans